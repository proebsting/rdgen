<< from grammar import Production,Alts,Sym,Opt,Rep,Parens,Lambda,Cons,Spec,Break,Continue,OnePlus,Sequence >>

spec:
    { code }'preamble
    grammar'g
    = << Spec(preamble,g) >>
    .

grammar:
    production'p 
    { production }'L 
    = << [p]+L >> 
    .

production: 
    id'lhs 
    ":" 
    alternation'rhs 
    "." 
    = << Production(lhs, rhs) >> 
    .

alternation: 
    sequence'x 
    { "|" @sequence }'L
    =<< Alts([x]+L) if L else x >>
    .

sequence: 
    { code }'prologue 
    term't
    << ret = last = Cons(t, Lambda()) >>
    {
        term't              
        << last.cdr = Cons(t, last.cdr) >> 
        << last = last.cdr              >> 
    } !
    [ "=" @code ]'c
    = << Sequence(prologue, ret, c) >> 
    .

term: 
    [ "@" ]     'at 
    @base       't 
    [ "!" ]     'simple
    [ "'" @id ] 'name 
    { code }    'stmts
    << t.keep   = at is not None       >>
    << t.simple = simple is not None   >>
    << t.name   = name or None         >>
    << t.stmts  = stmts                >>
    .

base: 
    "(" alternation'v ")"     =<< Parens(v)  >>
    | "{" alternation'v "}"   =<< Rep(v)     >>
    | "[" alternation'v "]"   =<< Opt(v)     >>
    | "{+" alternation'v "+}" =<< OnePlus(v) >>
    | id'id                   =<< Sym(id)    >>
    | str's                   =<< Sym(s)     >>
    | "break"                 =<< Break()    >>
    | "continue"              =<< Continue() >>
    .

code: CODE'c   =<< c.value.strip() >> .
id  : ID'id    =<< id.value        >> .
str : STR'id   =<< id.value        >> .
